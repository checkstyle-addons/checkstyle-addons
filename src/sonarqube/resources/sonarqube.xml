<?xml version="1.0" encoding="UTF-8"?>
<!--
    Checkstyle-Addons - Additional Checkstyle checks
    Copyright (C) 2015 Thomas Jensen

    This program is free software: you can redistribute it and/or modify it under the
    terms of the GNU General Public License, version 3, as published by the Free
    Software Foundation.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
    PARTICULAR PURPOSE. See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along with this
    program.  If not, see http://www.gnu.org/licenses/.
 -->
<rules>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- IllegalMethodCall                                                                     -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <rule>
        <key>com.thomasjensen.checkstyle.addons.checks.coding.IllegalMethodCallCheck</key>
        <name>Illegal Method Call</name>
        <category name="coding"/>
        <tag>checkstyle-addons</tag>
        <description><![CDATA[<p>Flags calls to methods with certain names. Occurrences are flagged based on the name
            alone; the type of the object to which the method belongs is not taken into account.</p>
            <p><a href="http://checkstyle-addons.thomasjensen.com/v@version@/checks/coding.html#IllegalMethodCall"
               target="_blank">Full Documentation</a></p>]]></description>
        <configKey>Checker/TreeWalker/IllegalMethodCall</configKey>
        <param key="illegalMethodNames" type="s{}">
            <description>Comma-separated list of plain method names, no parameters, no parentheses</description>
        </param>
        <param key="excludedQualifiers" type="s{}">
            <description>Comma-separated list of method call qualifiers indicating false positives</description>
        </param>
    </rule>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- LocationReference                                                                     -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <rule>
        <key>com.thomasjensen.checkstyle.addons.checks.misc.LocationReferenceCheck</key>
        <name>Broken Code Location Reference</name>
        <category name="misc"/>
        <tag>checkstyle-addons</tag>
        <description><![CDATA[<p>This check helps in cases where the name of the current method or class must be used
            as an argument to a method call or as initial value of a declared variable. It compares the actual argument
            to the current method or class name, and flags it if a mismatch is detected.</p>
            <p><a href="http://checkstyle-addons.thomasjensen.com/v@version@/checks/misc.html#LocationReference"
               target="_blank">Full Documentation</a></p>]]></description>
        <configKey>Checker/TreeWalker/LocationReference</configKey>
        <cardinality>MULTIPLE</cardinality>
        <param key="methodCalls" type="s{}">
            <description>Comma-separated list of method calls that should be checked</description>
        </param>
        <param key="variableNames" type="s{}">
            <description>Comma-separated list of variable names whose declarations should be checked</description>
        </param>
        <param key="location" type="s[method,simpleclass,fullclass,classobject]">
            <description>The location information expected here. Possible values are ``method``, ``simpleclass``, ``fullclass``, or ``classobject``.</description>
            <defaultValue>method</defaultValue>
        </param>
        <param key="argumentPosition" type="INTEGER">
            <description>The position of the location reference as an index of the argument list (used only for method calls; ignored for variable assignments)</description>
            <defaultValue>0</defaultValue>
        </param>
    </rule>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- LostInstance                                                                          -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <rule>
        <key>com.thomasjensen.checkstyle.addons.checks.coding.LostInstanceCheck</key>
        <name>Lost Instance</name>
        <category name="coding"/>
        <tag>checkstyle-addons</tag>
        <description><![CDATA[<p>Checks that object instances created explicitly with <code>new</code> are actually
            used for something. Just being assigned to a variable or passed as a parameter is enough. A full data flow
            analysis is not performed.</p>
            <p><a href="http://checkstyle-addons.thomasjensen.com/v@version@/checks/coding.html#LostInstance"
               target="_blank">Full Documentation</a></p>]]></description>
        <configKey>Checker/TreeWalker/LostInstance</configKey>
    </rule>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- ModuleDirectoryLayout                                                                 -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <rule>
        <key>com.thomasjensen.checkstyle.addons.checks.misc.ModuleDirectoryLayoutCheck</key>
        <name>Module directory layout not followed</name>
        <category name="misc" />
        <tag>checkstyle-addons</tag>
        <description><![CDATA[<p>This check helps ensure that the source folder structure in a module follows a
            configurable convention.</p>
            <p><a href="http://checkstyle-addons.thomasjensen.com/v@version@/checks/misc.html#ModuleDirectoryLayout"
               target="_blank">Full Documentation</a></p>]]></description>
        <configKey>Checker/ModuleDirectoryLayout</configKey>
        <param key="baseDir" type="STRING">
            <description>Base directory to assume for the check execution, usually the project root</description>
            <defaultValue>.</defaultValue>
        </param>
        <param key="configFile" type="STRING">
            <description>Location of configuration file in JSON format</description>
        </param>
        <param key="failQuietly" type="BOOLEAN">
            <description>When the file specified in the ``configFile`` option cannot be found, and this flag is ``true``, the check will quietly disable itself and do nothing. If ``false``, an exception will be thrown.</description>
            <defaultValue>false</defaultValue>
        </param>
    </rule>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- PropertyCatalog                                                                       -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <rule>
        <key>com.thomasjensen.checkstyle.addons.checks.misc.PropertyCatalogCheck</key>
        <name>Property out of sync</name>
        <category name="misc"/>
        <tag>checkstyle-addons</tag>
        <description><![CDATA[<p>This check helps to keep a property file in sync with a piece of code that contains
            the property keys.</p>
            <p><a href="http://checkstyle-addons.thomasjensen.com/v@version@/checks/misc.html#PropertyCatalog"
               target="_blank">Full Documentation</a></p>]]></description>
        <configKey>Checker/TreeWalker/PropertyCatalog</configKey>
        <param key="selection" type="REGULAR_EXPRESSION">
            <description>Regular expression to select the property catalog. Each selected type must have a corresponding property file. Applied to the binary class name, not to the file path. Partial matches allowed.</description>
            <defaultValue>^(?!x)x</defaultValue>
        </param>
        <param key="excludedFields" type="REGULAR_EXPRESSION">
            <description>Regular expression to match fields that should be ignored. Applied to the field name. Expression must match the entire field name.</description>
            <defaultValue>serialVersionUID</defaultValue>
        </param>
        <param key="enumArgument" type="BOOLEAN">
            <description>If ``true``, the first argument of the enum constructor is used as property key. If ``false``, the enum constant itself is used as the property key. Ignored if the type is not an ``enum``.</description>
            <defaultValue>false</defaultValue>
        </param>
        <param key="baseDir" type="STRING">
            <description>Base directory to assume for the check execution, usually the project root</description>
            <defaultValue>.</defaultValue>
        </param>
        <param key="propertyFile" type="STRING">
            <description>Template path to the property file. For constructing the path, the following placeholders may be used (examples for ``com.foo.Bar$Inner``):
            - ``{0}`` - the original binary class name, for example ``com.foo.Bar$Inner``
            - ``{1}`` - the binary class name as a path, for example ``com/foo/Bar/Inner``
            - ``{2}`` - fully qualified name of the outer class, for example ``com.foo.Bar``
            - ``{3}`` - fully qualified name of the outer class as a path, for example ``com/foo/Bar``
            - ``{4}`` - fully qualified name of the outer class as a path of ``..``'s, for example ``../../..``
            - ``{5}`` - the package name as a path, for example ``com/foo``
            - ``{6}`` - simple name of the outer class, for example ``Bar``
            - ``{7}`` - simple name of the inner class, for example ``Inner``
            - ``{8}`` - simple name of the first subdirectory below the current working directory on the path to the message catalog, for example ``subdir1``
            - ``{9}`` - simple name of the next subdirectory on the path to the message catalog, for example ``subdir2``
            - ``{10}`` - simple name of the third subdirectory on the path to the message catalog, for example ``subdir3``
            - ``{11}`` - This placeholder is special because it is dynamic. It is replaced by the empty String, ``{8}/``, ``{8}/{9}/``, and ``{8}/{9}/{10}/`` (in that order). Once the property file is found, the location is used. If not, the next variation is checked. This is useful when the same Checkstyle configuration is used for multiple projects with different structures.
            - ``{12}`` - the relative path fragment between the ``baseDir`` and the package directories (e.g.
                ``module1/src/main/java``)</description>
        </param>
        <param key="propertyFileEncoding" type="STRING">
            <description>Character encoding of the property files. Only relevant if non-ASCII characters appear in the property keys.</description>
            <defaultValue>UTF-8</defaultValue>
        </param>
        <param key="reportDuplicates" type="BOOLEAN">
            <description>Whether to report duplicate references</description>
            <defaultValue>true</defaultValue>
        </param>
        <param key="reportOrphans" type="BOOLEAN">
            <description>Whether to report unreferenced properties which exist in the property file</description>
            <defaultValue>true</defaultValue>
        </param>
        <param key="caseSensitive" type="BOOLEAN">
            <description>Should property keys be case sensitive?</description>
            <defaultValue>true</defaultValue>
        </param>
        <param key="fileExludes" type="REGULAR_EXPRESSION">
            <description>Files whose absolute path matches this regular expression are not checked. Partial matches allowed.</description>
            <defaultValue>[\\/]\.idea[\\/](?:checkstyleidea\.tmp[\\/])?csi-\w+[\\/]</defaultValue>
        </param>
    </rule>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- RegexpOnFilenameOrg                                                                   -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <rule>
        <key>com.thomasjensen.checkstyle.addons.checks.regexp.RegexpOnFilenameOrgCheck</key>
        <name>Regexp On Filename (Original)</name>
        <category name="regexp"/>
        <tag>checkstyle-addons</tag>
        <description><![CDATA[<p>Checks the names of files against a regular expression.</p>
            <p><a href="http://checkstyle-addons.thomasjensen.com/v@version@/checks/regexp.html#RegexpOnFilenameOrg"
               target="_blank">Full Documentation</a></p>]]></description>
        <configKey>Checker/RegexpOnFilenameOrg</configKey>
        <cardinality>MULTIPLE</cardinality>
        <param key="selection" type="REGULAR_EXPRESSION">
            <description>Only files which match this expression will be checked. Leave blank for unrestricted.</description>
        </param>
        <param key="regexp" type="REGULAR_EXPRESSION">
            <description>The regular expression to apply to the selected file names. The default expression matches when there are leading or trailing spaces in a file name.</description>
            <defaultValue>^(?:\s+.*|.*?\s+)$</defaultValue>
        </param>
        <param key="mode" type="s[illegal,required]">
            <description>Determines if the regular expression must match (``required``) or must not match (``illegal``).</description>
            <defaultValue>illegal</defaultValue>
        </param>
        <param key="simple" type="BOOLEAN">
            <description>Check the simple file name only (``true``), or the entire path (``false``).</description>
            <defaultValue>true</defaultValue>
        </param>
    </rule>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- RegexpOnString                                                                        -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <rule>
        <key>com.thomasjensen.checkstyle.addons.checks.regexp.RegexpOnStringCheck</key>
        <name>Regexp On String</name>
        <category name="regexp"/>
        <tag>checkstyle-addons</tag>
        <description><![CDATA[<p>Checks String literals against a regular expression. Matching Strings are flagged.</p>
            <p><a href="http://checkstyle-addons.thomasjensen.com/v@version@/checks/regexp.html#RegexpOnString"
               target="_blank">Full Documentation</a></p>]]></description>
        <configKey>Checker/TreeWalker/RegexpOnString</configKey>
        <cardinality>MULTIPLE</cardinality>
        <param key="regexp" type="REGULAR_EXPRESSION">
            <description>The regular expression used to find Strings to flag.</description>
            <defaultValue>^(?!x)x</defaultValue>
        </param>
    </rule>

</rules>
