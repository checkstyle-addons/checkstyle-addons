/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (C) 2015 Thomas Jensen, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption


task siteCopyJavadoc(type: Copy, dependsOn: javadoc) {
    description = 'Checkstyle-Addons: Copy Javadoc to site directory';

    destinationDir = new File(project.buildDir, 'site');
    into(project.version + '/apidocs') {
        from fileTree(dir: javadoc.destinationDir);
    }
    into('latest/apidocs') {
        from fileTree(dir: javadoc.destinationDir);
    }
}


task site (dependsOn: [processResources, siteCopyJavadoc]) {
    description = 'Checkstyle-Addons: Package documentation for publication on the website';

    FileTree tree = fileTree(sourceSets.main.resources.srcDirs.iterator().next()) {
        include '**/*.md';
    }
    inputs.files(tree.files);

    File siteDir = new File(project.buildDir, 'site');
    outputs.dir(siteDir);

    doLast {
        File checksDocDir = new File(siteDir, '_includes/' + project.version);
        checksDocDir.mkdirs();

        File checksCatsDir = new File(siteDir, project.version + '/checks');
        checksCatsDir.mkdirs();
        File latestChecksCatsDir = new File(siteDir, 'latest/checks');
        latestChecksCatsDir.mkdirs();

        Map<String, List<File>> rawDocs = new HashMap<>();
        tree.files.each {File f ->
            String cat = f.absoluteFile.parentFile.name;
            List<File> catDocs = rawDocs.get(cat);
            if (catDocs == null) {
                catDocs = new ArrayList<>();
                rawDocs.put(cat, catDocs);
            }
            catDocs.add(f.absoluteFile);
        }

        for (Map.Entry<String, List<File>> cat : rawDocs) {
            File mdDir = new File(checksDocDir, cat.key);
            mdDir.mkdir();

            SortedSet<String> frontMatterFileSet = new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
            for (File f : cat.value) {
                Files.copy(Paths.get(f.toURI()), Paths.get(new File(mdDir, f.name).toURI()),
                    StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
                frontMatterFileSet.add(project.version + '/' + cat.key + '/' + f.name);
            }

            File catPage = new File(checksCatsDir, cat.key + '.html');
            StringBuilder sb = new StringBuilder();
            sb.append("---\n");
            sb.append("layout: checks\n");
            sb.append("check_list:\n");
            for (String s : frontMatterFileSet) {
                sb.append("  - ");
                sb.append(s);
                sb.append("\n");
            }
            sb.append("---\n\n");
            catPage.withWriter { it << sb.toString() }

            Files.copy(Paths.get(catPage.toURI()), Paths.get(new File(latestChecksCatsDir, catPage.name).toURI()),
                StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
        }
    }
}
