/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (C) 2015 Thomas Jensen, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */


import com.thomasjensen.checkstyle.addons.build.DependencyConfig;
import com.thomasjensen.checkstyle.addons.build.TaskNames;
import com.thomasjensen.checkstyle.addons.build.tasks.GeneratePomFileTask;


GeneratePomFileTask pomFileTask = project.tasks.create("generatePom", GeneratePomFileTask.class);
pomFileTask.setDescription(project.ext.longName +
        ': Generates the Maven POM file for publication \'checkstyleAddons\' (no appendix).');
pomFileTask.addBundledConfigs(project.configurations['runtime']);


tasks.all { final Task pTask ->
    for (final java.util.Map.Entry<String, DependencyConfig> entry : project.ext.depConfigs.publications) {
        final String pubNameCap = entry.getKey().capitalize();
        final DependencyConfig depConfig = entry.getValue();

        // local publication depends on the pom.xml
        if (pTask.name.endsWith('PublicationToMavenLocal')) {
            final String taskName = "publish${pubNameCap}PublicationToMavenLocal";
            if (taskName.equals(pTask.name)) {
                pTask.dependsOn project.ext.nameFactory.getTask(TaskNames.generatePom,
                    depConfig.getCheckstyleBaseVersion());
            }
        }

        // the default task for POM creation is replaced by our own
        else if (pTask.name.startsWith('generatePomFileFor')) {
            final String taskName = "generatePomFileFor${pubNameCap}Publication";
            if (taskName.equals(pTask.name)) {
                pTask.enabled = false;  // we do this manually
                pTask.destination = new File(project.buildDir, 'tmp/' +
                    project.ext.nameFactory.getName(TaskNames.generatePom,
                        depConfig.getCheckstyleBaseVersion()) + '/pom.xml');
            }
        }
    }
}



task checkProperties {
    doLast {
        ['bintray.user', 'bintray.apikey', 'bintray.gpg.passphrase', 'sonatype.user', 'sonatype.password'].each {
            final String prp ->
            if (!project.hasProperty(prp)) {
                throw new GradleException("Could not find property \'${prp}\'. " +
                    'Did you forget to specify it in ~/.gradle/gradle.properties?');
            }
        }
    }
}

bintray {
    if (project.hasProperty('bintray.user') && project.hasProperty('bintray.apikey')
        && project.hasProperty('bintray.gpg.passphrase') && project.hasProperty('sonatype.user')
        && project.hasProperty('sonatype.password'))
    {
        user = project.property('bintray.user');
        key = project.property('bintray.apikey');

        Set<String> pubNames = project.ext.depConfigs.publications.keySet();
        publications = pubNames.toArray(new String[pubNames.size()]);
        publish = true;
        dryRun = true;   // comment out for actual release deployment
        pkg {
            repo = 'checkstyle-addons'
            userOrg = 'checkstyle-addons';
            name = project.name;
            desc = project.description;
            websiteUrl = project.ext.website;
            issueTrackerUrl = project.ext.issueTrackerUrl;
            vcsUrl = "https://github.com/${project.ext.github}.git";
            licenses = ['GPL-3.0'];
            publicDownloadNumbers = true;
            version {
                name = project.version;  // Bintray logical version name
                desc = project.description;
                released = project.ext.buildTimestamp;
                vcsTag = 'v' + project.version;
                gpg {
                    sign = true;
                    passphrase = project.property('bintray.gpg.passphrase');
                }
                mavenCentralSync {
                    sync = true;
                    user = project.property('sonatype.user');
                    password = project.property('sonatype.password');
                }
            }
        }
    }
}
tasks['bintrayUpload'].dependsOn('checkProperties');

