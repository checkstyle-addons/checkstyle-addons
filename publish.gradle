/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (C) 2015 Thomas Jensen, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */

publish {
    dependsOn assemble
}

def Node addPom(final Node pRoot)
{
    pRoot.appendNode('name', project.ext.longName);
    if (!project.ext.depConfigDefault.equals('cs' + project.ext.versions.Checkstyle)) {
        pRoot.appendNode('classifier', 'cs' + project.ext.versions.Checkstyle);
    }
    pRoot.appendNode('description', project.description);
    pRoot.appendNode('url', project.ext.website);

    final Node deps = pRoot.appendNode('dependencies');
    for (final String configName : project.ext.bundledConfigurations) {
        Configuration cfg = project.configurations.getByName(configName);
        if (cfg == null) {
            throw new GradleException('Unknown configuration: ' + configName);
        }
        for (Dependency d : cfg.allDependencies) {
            if (!(d instanceof ExternalDependency)) {
                throw new GradleException('Incompatible dependency: ' + d);
            }
            final ExternalDependency jar = (ExternalDependency) d;

            final Node depNode = deps.appendNode('dependency');
            depNode.appendNode('groupId', jar.getGroup());
            depNode.appendNode('artifactId', jar.getName());
            depNode.appendNode('version', jar.getVersion());

            final DependencyArtifact artifcat = jar.getArtifacts().getAt(0);
            String depClassifier = artifcat != null ? artifcat.getClassifier() : null;
            if (depClassifier != null) {
                depNode.appendNode('classifier', depClassifier);
            }
            depNode.appendNode('scope', 'compile');
        }
    }

    pRoot.appendNode('inceptionYear', '2015');

    final Node lics = pRoot.appendNode('licenses');
    final Node lic = lics.appendNode('license');
    lic.appendNode('name', 'GNU General Public License, Version 3');
    lic.appendNode('url', 'https://www.gnu.org/copyleft/gpl.html');

    final Node devs = pRoot.appendNode('developers');
    final Node dev = devs.appendNode('developer');
    dev.appendNode('name', project.ext.authorName);
    dev.appendNode('email', 'checkstyle@thomasjensen.com');

    final Node org = pRoot.appendNode('organization');
    org.appendNode('name', project.ext.orgName);
    org.appendNode('url', project.ext.orgUrl);

    final Node scm = pRoot.appendNode('scm');
    scm.appendNode('connection', 'scm:git:git@github.com:' + project.ext.github + '.git');
    scm.appendNode('developerConnection', 'scm:git:git@github.com:' + project.ext.github + '.git');
    scm.appendNode('url', 'git@github.com:' + project.ext.github + '.git');

    return pRoot;
}

model {
    tasks.generatePomFileForCheckstyleAddonsPublication {
        pom.withXml {
            addPom(asNode());
        }
    }
}

publishing {
    publications {
        checkstyleAddons(MavenPublication) {
            artifact jar
            artifact jarSources
            artifact jarJavadoc
        }
    }
}


task checkProperties << {
    ['bintray.user', 'bintray.apikey', 'bintray.gpg.passphrase', 'sonatype.user', 'sonatype.password'].each { String prp ->
        if (!project.hasProperty(prp)) {
            throw new GradleException("Could not find property \'${prp}\'. " +
                'Did you forget to specify it in ~/.gradle/gradle.properties?');
        }
    }
}
bintray {
    if (project.hasProperty('bintray.user') && project.hasProperty('bintray.apikey')
        && project.hasProperty('bintray.gpg.passphrase') && project.hasProperty('sonatype.user')
        && project.hasProperty('sonatype.password'))
    {
        user = project.property('bintray.user');
        key = project.property('bintray.apikey');

        publications = ['checkstyleAddons'];
        publish = true;
        dryRun = true;   // comment out for actual release deployment
        pkg {
            repo = 'checkstyle-addons'
            userOrg = 'checkstyle-addons';
            name = project.name;
            desc = project.description;
            websiteUrl = project.ext.website;
            issueTrackerUrl = project.ext.issueTrackerUrl;
            vcsUrl = 'https://github.com/checkstyle-addons/checkstyle-addons.git';
            licenses = ['GPL-3.0'];
            publicDownloadNumbers = true;
            version {
                name = project.version;  // Bintray logical version name
                released = project.ext.buildTimestamp;
                vcsTag = 'v' + project.version;
                gpg {
                    sign = true;
                    passphrase = project.property('bintray.gpg.passphrase');
                }
                mavenCentralSync {
                    sync = true;
                    user = project.property('sonatype.user');
                    password = project.property('sonatype.password');
                }
            }
        }
    }
}
tasks['bintrayUpload'].dependsOn('checkProperties');

