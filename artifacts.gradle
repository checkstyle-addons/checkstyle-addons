/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (C) 2015 Thomas Jensen, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
    }
}

import com.thomasjensen.checkstyle.addons.build.ConfigNames
import com.thomasjensen.checkstyle.addons.build.NameFactory
import com.thomasjensen.checkstyle.addons.build.TaskNames
import com.thomasjensen.checkstyle.addons.build.tasks.CreateFatJarTask
import com.thomasjensen.checkstyle.addons.build.tasks.CreateJarEclipseTask
import com.thomasjensen.checkstyle.addons.build.tasks.CreateJarJavadocTask
import com.thomasjensen.checkstyle.addons.build.tasks.CreateJarSonarqubeTask
import com.thomasjensen.checkstyle.addons.build.tasks.CreateJarSourcesTask
import com.thomasjensen.checkstyle.addons.build.tasks.CreateJarTask
import com.thomasjensen.checkstyle.addons.build.tasks.GeneratePomPropsTask


project.ext.depConfigs.activeDepConfigs.each { final String csVersion ->

    final NameFactory nameFactory = project.ext.nameFactory;
    final boolean isDefaultDepConfig = project.ext.depConfigs.isDefault(csVersion);
    final boolean hasSonarQube = project.ext.depConfigs.supportsSonarQube(csVersion);
    final boolean isPublished = project.ext.depConfigs.isPublished(csVersion);
    final String pubSuffix = project.ext.depConfigs.getDepConfig(csVersion).getPublicationSuffix();

    if (!isPublished) {
        return;
    }

    // 'generatePomProperties' task
    final String pomPropsTaskName = nameFactory.getName(TaskNames.generatePomProperties, csVersion);
    final GeneratePomPropsTask pomPropsTask = (GeneratePomPropsTask) project.tasks.create(
        name: pomPropsTaskName, type: GeneratePomPropsTask);
    pomPropsTask.setAppendix(isDefaultDepConfig ? null : pubSuffix);

    // 'generatePom' task
    if (!isDefaultDepConfig) {
        Class<?> generatePomTaskClass = project.tasks['generatePom'].getClass();
        Task generatePomTask = project.tasks.create(
            name: nameFactory.getName(TaskNames.generatePom, csVersion), type: generatePomTaskClass);
        generatePomTask.setDescription("${project.ext.longName}: Generates the Maven POM file for publication " +
            '\'checkstyleAddons\' (appendix: ' + pubSuffix + ').');
        generatePomTask.setAppendix(pubSuffix);
        generatePomTask.addBundledConfigs(nameFactory.getConfiguration(ConfigNames.mainRuntime, csVersion));
    }

    // 'jar' task
    final String jarTaskName = nameFactory.getName(TaskNames.jar, csVersion);
    final CreateJarTask jarTask = (CreateJarTask) project.tasks.create(name: jarTaskName, type: CreateJarTask);
    jarTask.configureFor(csVersion);
    project.artifacts {
        archives jarTask;
    }

    // 'fatjar' task
    final String fatjarTaskName = nameFactory.getName(TaskNames.fatJar, csVersion);
    final CreateFatJarTask fatjarTask = (CreateFatJarTask) project.tasks.create(
        name: fatjarTaskName, type: CreateFatJarTask);
    fatjarTask.configureFor(csVersion);
    project.artifacts {
        archives fatjarTask;
    }

    // 'jarSources' task
    final String jarSourcesTaskName = nameFactory.getName(TaskNames.jarSources, csVersion);
    final CreateJarSourcesTask jarSourcesTask = (CreateJarSourcesTask) project.tasks.create(
        name: jarSourcesTaskName, type: CreateJarSourcesTask);
    jarSourcesTask.configureFor(csVersion);
    project.artifacts {
        archives jarSourcesTask;
    }

    // 'jarJavadoc' task
    final String jarJavadocTaskName = nameFactory.getName(TaskNames.jarJavadoc, csVersion);
    final CreateJarJavadocTask jarJavadocTask = (CreateJarJavadocTask) project.tasks.create(
        name: jarJavadocTaskName, type: CreateJarJavadocTask);
    jarJavadocTask.configureFor(csVersion);
    project.artifacts {
        archives jarJavadocTask;
    }

    // Add JARs to list of artifacts to publish
    String pubName = 'checkstyleAddons';
    if (!isDefaultDepConfig) {
        pubName += '-' + pubSuffix;
    }
    MavenPublication pub = publishing.publications.create(pubName, MavenPublication.class);
    final String pubArtifactId = project.name + (isDefaultDepConfig ? '' : ('-' + pubSuffix));
    pub.setArtifactId(pubArtifactId);
    pub.artifact(jarTask);
    pub.artifact(jarSourcesTask);
    pub.artifact(jarJavadocTask);

    // 'jarEclipse' task
    final String eclipseTaskName = nameFactory.getName(TaskNames.jarEclipse, csVersion);
    final CreateJarEclipseTask jarEclipseTask = (CreateJarEclipseTask) project.tasks.create(
        name: eclipseTaskName, type: CreateJarEclipseTask);
    jarEclipseTask.configureFor(csVersion);
    project.artifacts {
        archives jarEclipseTask;
    }

    // 'jarSonarqube' task
    CreateJarSonarqubeTask jarSqTask = null;
    if (hasSonarQube) {
        final String sqTaskName = nameFactory.getName(TaskNames.jarSonarqube, csVersion);
        jarSqTask = (CreateJarSonarqubeTask) project.tasks.create(name: sqTaskName, type: CreateJarSonarqubeTask);
        jarSqTask.configureFor(csVersion);
        project.artifacts {
            archives jarSqTask;
        }
    }

    // 'assemble' task for Checkstyle-version-specific artifacts
    // Dependencies on 'jarJavadoc' and 'jarSources' are set later when the tasks are created
    final Task assembleTask = project.tasks.create(name: nameFactory.getName(TaskNames.assemble, csVersion));
    assembleTask.setGroup(BasePlugin.BUILD_GROUP);
    assembleTask.setDescription("${project.ext.longName}: Assembles the outputs of this project pertaining to " +
        "Checkstyle ${csVersion}.");
    assembleTask.dependsOn(jarTask);
    assembleTask.dependsOn(fatjarTask);
    assembleTask.dependsOn(jarSourcesTask);
    assembleTask.dependsOn(jarJavadocTask);
    assembleTask.dependsOn(jarEclipseTask);
    if (jarSqTask != null) {
        assembleTask.dependsOn(jarSqTask);
    }
}


tasks.jar {
    enabled = false;
}
