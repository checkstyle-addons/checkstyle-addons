/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (C) 2015 Thomas Jensen, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */
plugins {
    id 'java';
    id 'jacoco';
    id 'com.github.kt3k.coveralls' version '2.3.1';
    id 'checkstyle';
    id 'idea';
    //id 'com.github.johnrengelman.shadow' version '1.2.1';
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}


group = 'com.thomasjensen.checkstyle.addons';
version = '0.1.0-SNAPSHOT';
description = 'Additional Checkstyle Checks';
ext {
    javaVersion = '1.6';
    checkstyleVersion = '6.1.1';  // 6.1.1 is the latest JDK 6 based version
    bundledConfigurations = ['runtime'];
    authorName = 'Thomas Jensen';
    longName = 'Checkstyle Addons';
    buildTimestamp = new Date();
    sqPackage = 'com/thomasjensen/checkstyle/addons/sonarqube';
    website = 'http://checkstyle-addons.thomasjensen.com/';
}


/*
 * Configure IntelliJ IDEA
 */
idea.project {
    languageLevel = javaVersion;
}
idea.module {
    downloadSources = true;
    downloadJavadoc = true;
    excludeDirs += file(".idea");
    excludeDirs += file("delme");
}


/*
 * Compile with Java 6 for now
 */
final String jdk6PropName = 'checkstyleaddons_jdk6_javac';
def javac6 = project.hasProperty(jdk6PropName) ? project.property(jdk6PropName) : System.getenv(jdk6PropName);
if (javac6 == null) {
    throw new GradleException('Property \'' + jdk6PropName + '\' not defined in gradle.properties. ' +
        'It must point to a Java 6 compiler executable.');
}
tasks.withType(JavaCompile) {
    sourceCompatibility = javaVersion;
    targetCompatibility = javaVersion;
    options.encoding = 'UTF-8';
    options.fork = true;
    options.forkOptions.executable = javac6;
}


/*
 * 'Provided' configuration for JARs which need not be packaged
 */
configurations {
    provided
}
idea.module {
    scopes.PROVIDED.plus += [configurations.provided];
}
sourceSets.main.compileClasspath += configurations.provided;
sourceSets.main.runtimeClasspath += configurations.provided;
sourceSets.test.compileClasspath += configurations.provided;
sourceSets.test.runtimeClasspath += configurations.provided;


/*
 * Dependencies
 */
dependencies {
    provided group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.3';
    provided group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.3';
    provided group: 'org.codehaus.sonar', name: 'sonar-plugin-api', version: '3.0';
    compile group: 'com.puppycrawl.tools', name: 'checkstyle', version: checkstyleVersion;
    testCompile group: 'junit', name: 'junit', version: '4.11';
}


/*
 * Javadoc generation
 */
javadoc {
    title = project.ext.longName + ' v' + project.version;
    classpath = project.sourceSets.main.compileClasspath;
    options.encoding = 'UTF-8';
    options.docEncoding = 'UTF-8';
    options.charSet = 'UTF-8';
    options.author = true;
    options.use = true;
    options.windowTitle = project.ext.longName;
    options.splitIndex = false;
    options.outputLevel = null;   // specify neither -quiet nor -verbose
    options.header = project.ext.longName;
    options.links('http://docs.oracle.com/javase/6/docs/api/',
            'http://javadocs.sonarsource.org/3.0/apidocs/',
            'http://checkstyle.sourceforge.net/apidocs/');
}


/*
 * Checkstyle configuration
 */
checkstyle {
    configFile file('project/checkstyle.xml');
    configProperties 'projectDir': project.projectDir;
    toolVersion checkstyleVersion;
    showViolations = true;
    ignoreFailures = false;
}


/*
 * JaCoCo test coverage configuration
 */
jacocoTestReport {
    reports {
        xml.enabled = true;   // coveralls plugin depends on xml format report
        html.enabled = true;
    }
}
tasks.withType(Test) { task ->
    jacoco {
        append = false
    }
}


/*
 * Creation of the individual JARs produced by this project
 */
apply from: 'artifacts.gradle';
