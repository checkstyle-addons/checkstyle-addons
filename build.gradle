/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (c) 2015-2020, the Checkstyle Addons contributors
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'java-library'
    id 'jacoco'
    id 'checkstyle'
    id 'idea'
    id 'signing'
    id 'maven-publish'
    alias checkstyleAddonsLibs.plugins.spotbugs
    id 'org.barfuin.gradle.taskinfo' version '1.3.1'
    id 'com.thomasjensen.checkstyle.addons.build'
}

repositories {
    mavenCentral()
}

import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Project metadata
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

group = 'com.thomasjensen.checkstyle.addons'
description = 'Additional Checkstyle Checks'
// version set by build plugin based on version.properties file

checkstyleAddons {
    authorName = 'Thomas Jensen'
    buildTimestamp = new Date()
    checksPackage = 'com/thomasjensen/checkstyle/addons/checks'
    github = 'checkstyle-addons/checkstyle-addons'
    issueTrackerUrl = github.map { "https://github.com/${it}/issues" }
    longName = 'Checkstyle Addons'
    orgName = 'Checkstyle Addons'
    orgUrl = 'https://github.com/checkstyle-addons'
    sqPackage = 'com/thomasjensen/checkstyle/addons/sonarqube'
    sqPluginKey = 'checkstyleaddons'
    website = 'https://checkstyle-addons.thomasjensen.com/'
}

project.gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':jarDefault')) {
        logger.lifecycle("\nBuilding ${project.name} ${project.version}")
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Dependencies of the 'default' dependency configuration, which is also used by the IDE
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

dependencies {
    generalCompileOnly checkstyleAddonsLibs.jcip
    generalCompileOnly checkstyleAddonsLibs.spotbugs.annotations
    generalCompileOnly checkstyleAddonsLibs.jsr305

    api group: 'com.puppycrawl.tools', name: 'checkstyle', version: checkstyleAddonsLibs.versions.checkstyleBase.get()
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.2'

    sonarqubeImplementation group: 'org.codehaus.sonar', name: 'sonar-plugin-api', version: '3.0'
    sonarqubeRuntimeOnly group: 'org.slf4j', name: 'slf4j-nop', version: '1.6.2'

    testImplementation checkstyleAddonsLibs.junit
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.27.0'

    spotbugsPlugins group: 'com.mebigfatguy.sb-contrib', name: 'sb-contrib', version: '7.4.7'
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Compilation
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

java {
    sourceCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked'
    if (it.name != JavaPlugin.COMPILE_JAVA_TASK_NAME) {
        options.compilerArgs << '-Xlint:deprecation'
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   SpotBugs configuration
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

spotbugs {
    toolVersion = checkstyleAddonsLibs.versions.spotbugs.get()
    effort = 'max'
    reportLevel = 'low'
    ignoreFailures = false
    includeFilter = file('config/spotbugs.xml')
    excludeFilter = file('config/spotbugs-excludes.xml')
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask.class).configureEach {
    it.setGroup(JavaBasePlugin.VERIFICATION_GROUP)
    reports {
        xml.required = false
        html {
            required = true
            stylesheet = 'fancy-hist.xsl'
        }
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   IntelliJ IDEA
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

idea.module {
    // Caution: The next line is not picked up correctly by IDEA. Correct manually after import.
    //          This means making sure that 'main', 'test', and 'sonarqube' source sets are set to Java 7.
    languageLevel = new IdeaLanguageLevel(JavaVersion.VERSION_1_7)
    downloadSources = true
    downloadJavadoc = true
    excludeDirs += file('.idea')
    excludeDirs += file('.jekyll-cache')
    excludeDirs += file('_posts')
    excludeDirs += file('_site')
    excludeDirs += file('_support')
}
idea.project {
    jdkName = JavaVersion.VERSION_11
    languageLevel = JavaVersion.VERSION_11
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Checkstyle configuration for checking our own code
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

checkstyle {
    configDirectory = file('config')
    configProperties 'workspace_loc': project.projectDir
    toolVersion = '7.1.2'    // depends on our checkstyle.xml; has nothing to do with the CS version used for building
    showViolations = true
    ignoreFailures = false
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   JaCoCo
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

def excludedClasses = ['CheckstyleApiFixer', 'MdlJsonConfigValidator']
tasks.named('test').configure {
    jacoco {
        excludes = excludedClasses
    }
}
tasks.named('jacocoTestReport', JacocoReport).configure { jacocoReportTask ->
    jacocoReportTask.dependsOn(tasks.named('test'))
    jacocoReportTask.reports {
        html.required = true
        xml.required = true
        csv.required = false
    }
    jacocoReportTask.sourceSets(sourceSets.main, sourceSets.sonarqube)
    jacocoReportTask.classDirectories.setFrom((FileCollection) fileTree(
        dir: sourceSets.main.output.classesDirs.first()).exclude(excludedClasses.collect{"**/$it*"}))
    jacocoReportTask.additionalClassDirs.setFrom(fileTree(dir: sourceSets.sonarqube.output.classesDirs.first()))
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Publishing of artifacts
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

publishing {
    repositories {
        maven {
            name = 'localBuildDir'
            url = "$buildDir/maven-repo-test"
        }
        maven {
            name = 'mavenCentralStaging'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            if (project.hasProperty('sonatype.user') && project.hasProperty('sonatype.password')) {
                credentials {
                    username = project.getProperty('sonatype.user')
                    password = project.getProperty('sonatype.password')
                }
            }
        }
    }
}

signing {
    useGpgCmd()   // use local GPG installation and agent
    // CHECK Unfortunately, the signing plugin does not make use of configuration avoidance yet, so it causes 20+ tasks
    //       to be unnecessarily realized (as of Gradle 7.4.1).
    sign(publishing.publications)
}
tasks.withType(Sign).configureEach {
    it.setGroup(PublishingPlugin.PUBLISH_TASK_GROUP)
}

tasks.register('checkPublishProperties').configure {
    setDescription('Ensure that all properties required for publishing are set')
    setGroup(PublishingPlugin.PUBLISH_TASK_GROUP)
    doLast {
        ['sonatype.user', 'sonatype.password', 'signing.gnupg.keyName.thomasjensen.com'].each {
            final String prp ->
                if (!project.hasProperty(prp)) {
                    String gradlePropsPath = new File(gradle.getGradleUserHomeDir(), "gradle.properties").canonicalPath;
                    throw new GradleException("Could not find property \'${prp}\'. " +
                            "Did you forget to specify it in ${gradlePropsPath}?")
                }
        }
    }
}
tasks.withType(PublishToMavenRepository).configureEach {
    if (it.name.endsWith('ToMavenCentralStagingRepository')) {
        it.dependsOn(tasks.named('checkPublishProperties'))
    }
}
tasks.withType(Sign).configureEach {
    it.dependsOn(tasks.named('checkPublishProperties'))
}
