/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (C) 2015 Thomas Jensen, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */
plugins {
    id 'java';
    id 'jacoco';
    id 'com.github.kt3k.coveralls' version '2.3.1';
    id 'checkstyle';
    id 'idea';
    id 'maven-publish';
    id 'com.jfrog.bintray' version '1.2';
    //id 'com.github.johnrengelman.shadow' version '1.2.1';
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}


group = 'com.thomasjensen.checkstyle.addons';
version = '1.2.2-SNAPSHOT';
description = 'Additional Checkstyle Checks';
ext {
    depConfig = getActiveDepConfig();
    versions = readDependencyVersions(depConfig);
    assert versions.size() == 7;
    bundledConfigurations = ['runtime'];
    authorName = 'Thomas Jensen';
    longName = 'Checkstyle Addons';
    orgName = 'Checkstyle Addons';
    orgUrl = 'https://github.com/checkstyle-addons';
    github = 'checkstyle-addons/checkstyle-addons';
    issueTrackerUrl = "https://github.com/${github}/issues";
    buildTimestamp = new Date();
    sqPackage = 'com/thomasjensen/checkstyle/addons/sonarqube';
    checksPackage = 'com/thomasjensen/checkstyle/addons/checks';
    website = 'http://checkstyle-addons.thomasjensen.com/';
}


/*
 * Configure IntelliJ IDEA
 */
idea.project {
    languageLevel = versions.Java;
    // TODO set file encoding to UTF-8
    // example: http://mrhaki.blogspot.de/2012/09/gradle-goodness-customize-idea-project.html
}
idea.module {
    downloadSources = true;
    downloadJavadoc = true;
    excludeDirs += file(".idea");
    excludeDirs += file("_site");
    excludeDirs += file("_support");
}


/*
 * Sometimes a different compiler is requested
 */
tasks.withType(JavaCompile) {
    sourceCompatibility = versions.Java;
    targetCompatibility = versions.Java;
    options.encoding = 'UTF-8';

    // The warning "Supported source version 'RELEASE_6' from annotation processor 'org.antlr.v4.runtime.misc.
    // NullUsageProcessor' less than -source '1.7'" is okay and may be ignored. It will go away when Checkstyle
    // updates to ANTLR 4.5: https://github.com/antlr/antlr4/issues/487

    final String jdk6PropName = 'checkstyleaddons_jdk6_javac';
    def javac6 = project.hasProperty(jdk6PropName) ? project.property(jdk6PropName) : System.getenv(jdk6PropName);
    if ('1.6'.equals(versions.Java) && javac6 != null) {
        options.fork = true;
        options.forkOptions.executable = javac6;
    }
    doFirst {
        if ('1.6'.equals(versions.Java) && javac6 == null) {
            throw new GradleException('ERROR: Property \'' + jdk6PropName + '\' not defined in gradle.properties. ' +
                'It must point to a Java 6 compiler executable.');
        }
    }
}
if ("NOT_SUPPORTED".equals(versions.SonarQube)) {
    sourceSets.main.java.exclude '**/sonarqube/**';
    sourceSets.test.java.exclude '**/sonarqube/**';
}


/*
 * 'Provided' configuration for JARs which need not be packaged
 */
configurations {
    provided
}
idea.module {
    scopes.PROVIDED.plus += [configurations.provided];
}
sourceSets.main.compileClasspath += configurations.provided;
sourceSets.main.runtimeClasspath += configurations.provided;
sourceSets.test.compileClasspath += configurations.provided;
sourceSets.test.runtimeClasspath += configurations.provided;


/*
 * Dependencies
 */
dependencies {
    provided group: 'com.google.code.findbugs', name: 'annotations', version: versions.FindBugs;
    provided group: 'com.google.code.findbugs', name: 'jsr305', version: versions.FindBugs;
    if (!"NOT_SUPPORTED".equals(versions.SonarQube)) {
        provided group: 'org.codehaus.sonar', name: 'sonar-plugin-api', version: versions.SonarQube;
    }
    compile group: 'com.puppycrawl.tools', name: 'checkstyle', version: versions.Checkstyle;
    testCompile group: 'junit', name: 'junit', version: '4.11';
}


/*
 * Javadoc generation
 */
javadoc {
    title = project.ext.longName + ' v' + project.version;
    classpath = project.sourceSets.main.compileClasspath;
    options.encoding = 'UTF-8';
    options.docEncoding = 'UTF-8';
    options.charSet = 'UTF-8';
    options.author = true;
    options.use = true;
    options.windowTitle = project.ext.longName;
    options.splitIndex = false;
    options.outputLevel = null;   // specify neither -quiet nor -verbose
    options.header = project.ext.longName;
    if ('1.7'.equals(versions.Java)) {
        options.links('http://docs.oracle.com/javase/7/docs/api/',
            'http://javadocs.sonarsource.org/3.0/apidocs/',
            'http://checkstyle.sourceforge.net/apidocs/');
    } else if ('1.6'.equals(versions.Java)) {
        options.links('https://jsr-305.googlecode.com/svn/trunk/javadoc/',
            'http://docs.oracle.com/javase/6/docs/api/',
            'http://javadocs.sonarsource.org/3.0/apidocs/',
            'http://checkstyle.sourceforge.net/apidocs/');
    }

    // javadoc does not inherit the proxy settings (https://issues.gradle.org/browse/GRADLE-1228)
    if (System.properties['http.proxyHost'] != null) {
        options.jFlags('-DproxyHost=' + System.properties['http.proxyHost'],
                '-DproxyPort=' + System.properties['http.proxyPort'],
                '-DproxyUser=' + System.properties['http.proxyUser'],
                '-DproxyPassword=' + System.properties['http.proxyPassword']);
    }
}


/*
 * Checkstyle configuration
 */
checkstyle {
    configFile file('project/checkstyle.xml');
    configProperties 'projectDir': project.projectDir;
    toolVersion '6.4.1';  // depends on our checkstyle.xml; has nothing to do with the version used for building
    showViolations = true;
    ignoreFailures = false;
}


/*
 * JaCoCo test coverage configuration
 */
jacocoTestReport {
    reports {
        xml.enabled = true;   // coveralls plugin depends on xml format report
        html.enabled = true;
    }
}
tasks.withType(Test) { task ->
    jacoco {
        append = false
    }
}
test {
    testLogging {
        events 'started', 'skipped', 'passed', 'failed';
        exceptionFormat 'full';
    }
}


/*
 * Read project/deps_${depConfig}.properties to build the dependency map
 */
def String getActiveDepConfig()
{
    final String depsPropName = 'checkstyleaddons_deps';
    def depsCfgName = project.hasProperty(depsPropName) ? project.property(depsPropName) : System.getenv(depsPropName);
    if (depsCfgName == null) {
        depsCfgName = 'default';
    }
    return depsCfgName;
}

def Map<String, String> readDependencyVersions(final String pDepConfig)
{
    final File depsCfgFile = new File("project/deps_${pDepConfig}.properties");

    System.out.println('--------------------------------------------------------------------------------------------');
    System.out.println('Dependency configuration: ' + depsCfgFile);

    def props = new Properties();
    depsCfgFile.withInputStream {
        InputStream stream -> props.load(stream);
    }

    System.out.println(props.getProperty('Description'));
    System.out.println('--------------------------------------------------------------------------------------------');

    props.remove('Description');
    return new HashMap<>(props);
}


/*
 * Packaging of documentation for publication on the website
 */
apply from: 'site.gradle';

/*
 * Publishing of artifacts
 */
apply from: 'publish.gradle';

/*
 * Creation of the individual JARs produced by this project
 */
apply from: 'artifacts.gradle';
