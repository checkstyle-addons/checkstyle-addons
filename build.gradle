/*
 * Checkstyle-Addons - Additional Checkstyle checks
 * Copyright (C) 2015 Thomas Jensen, All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License, version 3, as published by the Free
 * Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this
 * program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
    }
}
plugins {
    id 'java-library';
    id 'jacoco';
    id 'com.github.kt3k.coveralls' version '2.8.1';
    id 'checkstyle';
    id 'findbugs';
    id 'idea';
    id 'maven-publish';
    id 'com.jfrog.bintray' version '1.2';
    id 'com.dorongold.task-tree' version '1.3';
}

repositories {
    jcenter()
}


import com.thomasjensen.checkstyle.addons.build.BuildUtil;
import com.thomasjensen.checkstyle.addons.build.ClasspathBuilder;
import com.thomasjensen.checkstyle.addons.build.DependencyConfig;
import com.thomasjensen.checkstyle.addons.build.DependencyConfigs;
import com.thomasjensen.checkstyle.addons.build.JavaLevelUtil;
import com.thomasjensen.checkstyle.addons.build.TaskCreator;
import com.thomasjensen.checkstyle.addons.build.VersionWrapper;
import com.thomasjensen.checkstyle.addons.build.tasks.JavadocTask;
import com.thomasjensen.checkstyle.addons.build.tasks.SiteTask;
import org.apache.tools.ant.filters.ReplaceTokens;


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Project metadata
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

group = 'com.thomasjensen.checkstyle.addons';
description = 'Additional Checkstyle Checks';
version = new VersionWrapper(project).toString();
ClasspathBuilder.clearConfigCache();
new JavaLevelUtil(project).analyzeJavaLevels();
sourceCompatibility = JavaVersion.VERSION_1_7;

ext {
    // keep these in sync with the ExtProp enum
    defaultPublication = 'checkstyleAddons';   // name of the default Gradle publication
    authorName = 'Thomas Jensen';
    longName = 'Checkstyle Addons';
    orgName = 'Checkstyle Addons';
    orgUrl = 'https://github.com/checkstyle-addons';
    github = 'checkstyle-addons/checkstyle-addons';
    issueTrackerUrl = "https://github.com/${github}/issues";
    buildTimestamp = new Date();
    sqPluginKey = 'checkstyleaddons';
    sqPackage = 'com/thomasjensen/checkstyle/addons/sonarqube';
    checksPackage = 'com/thomasjensen/checkstyle/addons/checks';
    website = 'http://checkstyle-addons.thomasjensen.com/';
    buildUtil = new BuildUtil(project);
    gitHash = buildUtil.currentGitCommitHash();
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Dependencies of the 'default' dependency configuration, which is also used by the IDE
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

final TaskCreator taskCreator = new TaskCreator(project);
taskCreator.establishSonarQubeSourceSet();
taskCreator.establishGeneralCompileOnlyCfg();

dependencies {
    generalCompileOnly group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1';
    generalCompileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1';

    api group: 'com.puppycrawl.tools', name: 'checkstyle', version: '8.0';
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.7.3';

    sonarqubeImplementation group: 'org.codehaus.sonar', name: 'sonar-plugin-api', version: '3.0';
    sonarqubeRuntimeOnly group: 'org.slf4j', name: 'slf4j-nop', version: '1.6.2';

    testImplementation group: 'junit', name: 'junit', version: '4.12';

    findbugs group: 'com.google.code.findbugs', name: 'findbugs', version: '3.0.1';
    findbugs group: 'com.mebigfatguy.fb-contrib', name: 'fb-contrib', version: '6.6.1';
}

ext {
    depConfigs = new DependencyConfigs(project);
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Create all the tasks needed for handling dependency configurations
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ext {
    testConfigClosure = {
        testLogging {
            events 'failed';
            showStackTraces = true;
            showExceptions = true;
            showCauses = true;
            exceptionFormat 'full';
        }
        onOutput { final TestDescriptor descriptor, final TestOutputEvent event ->
            if (descriptor.className != 'com.thomasjensen.checkstyle.addons.checks.misc.MdlJsonConfigValidatorTest' ||
                    event.getDestination() == TestOutputEvent.Destination.StdErr) {
                logger.lifecycle(event.message);
            }
        }
        afterSuite { final TestDescriptor descriptor, final TestResult testResult ->
            if (descriptor.getParent() == null) {
                logger.lifecycle('\r\t' + testResult.testCount + ' tests executed, ' +
                        testResult.successfulTestCount + ' successful, ' +
                        (testResult.testCount - testResult.successfulTestCount - testResult.skippedTestCount) +
                        ' failed, ' + testResult.skippedTestCount + ' skipped.');
            }
        }
    }
}

project.ext.depConfigs.getAll().findAll{ !it.value.isDefaultConfig() }.each {
    final Map.Entry<String, DependencyConfig> entry -> taskCreator.setupBuildTasks(entry.getValue());
}
taskCreator.setupCrossCheckTasks();
taskCreator.adjustTaskGroupAssignments();

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8';
    options.compilerArgs << '-Xlint:unchecked';
    if (it.name != JavaPlugin.COMPILE_JAVA_TASK_NAME) {
        options.compilerArgs << '-Xlint:deprecation';
    }
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   FindBugs configuration
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

findbugs {
    toolVersion = '3.0.1';
    effort = 'max';
    reportLevel = 'low';
    ignoreFailures = false;
    includeFilter = file('project/findbugs.xml');
    excludeFilter = file('project/findbugs-excludes.xml');
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   IntelliJ IDEA
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

// TODO set file encoding to UTF-8
// example: http://mrhaki.blogspot.de/2012/09/gradle-goodness-customize-idea-project.html
idea.module {
    downloadSources = true;
    downloadJavadoc = true;
    excludeDirs += file('.idea');
    excludeDirs += file('_site');
    excludeDirs += file('_support');
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Javadoc
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

JavadocTask.configureJavadocTask((Javadoc) tasks.javadoc, (DependencyConfig) project.ext.depConfigs.getDefault());


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Checkstyle configuration for checking our own code
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

checkstyle {
    configFile file('project/checkstyle.xml');
    configProperties 'workspace_loc': project.projectDir;
    toolVersion '7.1.2';    // depends on our checkstyle.xml; has nothing to do with the CS version used for building
    showViolations = true;
    ignoreFailures = false;
}


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   JaCoCo
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

String[] excludedClasses = ['**/com/thomasjensen/checkstyle/addons/util/CheckstyleApiFixer*',
                            '**/com/thomasjensen/checkstyle/addons/checks/misc/MdlJsonConfigValidator*'];
test((Closure) testConfigClosure);
test {
    jacoco {
        append = false;
        excludes = excludedClasses;
    }
}
jacocoTestReport {
    reports {
        html.enabled = true;
        xml.enabled = true;     // coveralls plugin depends on xml format report
        csv.enabled = false;
    }
    sourceSets(sourceSets.main, sourceSets.sonarqube);
    doFirst {
        setClassDirectories((FileCollection)
            fileTree(dir: sourceSets.main.output.classesDirs.first()).exclude(excludedClasses));
        additionalClassDirs = fileTree(dir: sourceSets.sonarqube.output.classesDirs.first());
    }
}
tasks.jacocoTestReport.dependsOn tasks.test;


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Packaging of documentation for publication on the website
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

task siteCopyJavadoc(type: Copy, dependsOn: javadoc) {
    setDescription((String) project.ext.longName + ': Copy Javadoc to site directory');

    destinationDir = new File(project.buildDir, 'site');
    into("v${project.version}/apidocs") {
        from fileTree(dir: javadoc.destinationDir);
        filter { String line ->
            line.contains("${project.ext.website}latest/checks/") ? line.replace("${project.ext.website}latest/checks/",
                "${project.ext.website}v${project.version}/checks/") : line;
        }
    }
    into("v${project.version}/apidocs/resources") {
        from fileTree(dir: new File(javadoc.destinationDir, 'resources'));
    }
    into('latest/apidocs') {
        from fileTree(dir: javadoc.destinationDir);
    }
}


task siteCopyAllChecks(type: Copy) {
    setDescription((String) project.ext.longName + ': Copy list of all checks to site directory');

    destinationDir = new File(project.buildDir, 'site');
    final File originalFile = new File(sourceSets.main.resources.srcDirs.iterator().next(),
        '/' + (String) project.ext.checksPackage + '/all_checks.html');
    into("v${project.version}/checks") {
        from originalFile;
        rename { String fileName -> fileName.replace(originalFile.name, 'index.html'); }
        filter(ReplaceTokens, tokens: [version: "v${project.version}".toString()]);
    }
    into('latest/checks') {
        from originalFile;
        rename { String fileName -> fileName.replace(originalFile.name, 'index.html'); }
        filter(ReplaceTokens, tokens: [version: "v${project.version}".toString()]);
    }
}


task siteCopyDownloadGuide(type: Copy) {
    setDescription((String) project.ext.longName + ': Copy download guide frontmatter stub to site directory');

    destinationDir = new File(project.buildDir, 'site');
    final File originalFile = new File(sourceSets.main.resources.srcDirs.iterator().next(), '/download-guide.html');
    into("v${project.version}") {
        from originalFile;
        filter(ReplaceTokens, tokens: [version: project.version]);
    }
    into('latest') {
        from originalFile;
        filter(ReplaceTokens, tokens: [version: project.version]);
    }
}

task site (type: SiteTask);


// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//   Publishing of artifacts
// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

taskCreator.setupArtifactTasks();
taskCreator.rewirePublishingTasks(this);

task checkProperties {
    setDescription((String) project.ext.longName + ': Ensure that all properties required for bintray upload are set');
    setGroup(PublishingPlugin.PUBLISH_TASK_GROUP);
    doLast {
        ['bintray.user', 'bintray.apikey', 'bintray.gpg.passphrase', 'sonatype.user', 'sonatype.password'].each {
            final String prp ->
                if (!project.hasProperty(prp)) {
                    throw new GradleException("Could not find property \'${prp}\'. " +
                        'Did you forget to specify it in ~/.gradle/gradle.properties?');
                }
        }
    }
}

bintray {
    if (project.hasProperty('bintray.user') && project.hasProperty('bintray.apikey')
        && project.hasProperty('bintray.gpg.passphrase') && project.hasProperty('sonatype.user')
        && project.hasProperty('sonatype.password'))
    {
        user = project.property('bintray.user');
        key = project.property('bintray.apikey');

        Set<String> pubNames = project.ext.depConfigs.publications.keySet();
        publications = pubNames.toArray(new String[pubNames.size()]);
        publish = true;
        dryRun = true;   // comment out for actual release deployment
        pkg {
            repo = 'checkstyle-addons'
            userOrg = 'checkstyle-addons';
            name = project.name;
            desc = project.description;
            websiteUrl = project.ext.website;
            issueTrackerUrl = project.ext.issueTrackerUrl;
            vcsUrl = "https://github.com/${project.ext.github}.git";
            licenses = ['GPL-3.0'];
            publicDownloadNumbers = true;
            version {
                name = project.version;  // Bintray logical version name
                desc = project.description;
                released = project.ext.buildTimestamp;
                vcsTag = 'v' + project.version;
                gpg {
                    sign = true;
                    passphrase = project.property('bintray.gpg.passphrase');
                }
                mavenCentralSync {
                    sync = true;
                    user = project.property('sonatype.user');
                    password = project.property('sonatype.password');
                }
            }
        }
    }
}
tasks['bintrayUpload'].dependsOn('checkProperties');
